// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>
#include "../inst/include/bigvis.h"

using namespace Rcpp;

// condense_count
List condense_count(const List& x, const NumericVector& z, const NumericVector& weight, bool drop = false);
RcppExport SEXP bigvis_condense_count(SEXP xSEXP, SEXP zSEXP, SEXP weightSEXP, SEXP dropSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    List x = Rcpp::as<List >(xSEXP);
    NumericVector z = Rcpp::as<NumericVector >(zSEXP);
    NumericVector weight = Rcpp::as<NumericVector >(weightSEXP);
    bool drop = Rcpp::as<bool >(dropSEXP);
    List __result = condense_count(x, z, weight, drop);
    return Rcpp::wrap(__result);
END_RCPP
}
// condense_sum
List condense_sum(const List& x, const NumericVector& z, const NumericVector& weight, bool drop = false);
RcppExport SEXP bigvis_condense_sum(SEXP xSEXP, SEXP zSEXP, SEXP weightSEXP, SEXP dropSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    List x = Rcpp::as<List >(xSEXP);
    NumericVector z = Rcpp::as<NumericVector >(zSEXP);
    NumericVector weight = Rcpp::as<NumericVector >(weightSEXP);
    bool drop = Rcpp::as<bool >(dropSEXP);
    List __result = condense_sum(x, z, weight, drop);
    return Rcpp::wrap(__result);
END_RCPP
}
// condense_mean
List condense_mean(const List& x, const NumericVector& z, const NumericVector& weight, bool drop = false);
RcppExport SEXP bigvis_condense_mean(SEXP xSEXP, SEXP zSEXP, SEXP weightSEXP, SEXP dropSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    List x = Rcpp::as<List >(xSEXP);
    NumericVector z = Rcpp::as<NumericVector >(zSEXP);
    NumericVector weight = Rcpp::as<NumericVector >(weightSEXP);
    bool drop = Rcpp::as<bool >(dropSEXP);
    List __result = condense_mean(x, z, weight, drop);
    return Rcpp::wrap(__result);
END_RCPP
}
// condense_sd
List condense_sd(const List& x, const NumericVector& z, const NumericVector& weight, bool drop = false);
RcppExport SEXP bigvis_condense_sd(SEXP xSEXP, SEXP zSEXP, SEXP weightSEXP, SEXP dropSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    List x = Rcpp::as<List >(xSEXP);
    NumericVector z = Rcpp::as<NumericVector >(zSEXP);
    NumericVector weight = Rcpp::as<NumericVector >(weightSEXP);
    bool drop = Rcpp::as<bool >(dropSEXP);
    List __result = condense_sd(x, z, weight, drop);
    return Rcpp::wrap(__result);
END_RCPP
}
// condense_median
List condense_median(const List& x, const NumericVector& z, const NumericVector& weight, bool drop = false);
RcppExport SEXP bigvis_condense_median(SEXP xSEXP, SEXP zSEXP, SEXP weightSEXP, SEXP dropSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    List x = Rcpp::as<List >(xSEXP);
    NumericVector z = Rcpp::as<NumericVector >(zSEXP);
    NumericVector weight = Rcpp::as<NumericVector >(weightSEXP);
    bool drop = Rcpp::as<bool >(dropSEXP);
    List __result = condense_median(x, z, weight, drop);
    return Rcpp::wrap(__result);
END_RCPP
}
// double_diff_sum
std::vector<int> double_diff_sum(IntegerVector bin, IntegerVector count);
RcppExport SEXP bigvis_double_diff_sum(SEXP binSEXP, SEXP countSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    IntegerVector bin = Rcpp::as<IntegerVector >(binSEXP);
    IntegerVector count = Rcpp::as<IntegerVector >(countSEXP);
    std::vector<int> __result = double_diff_sum(bin, count);
    return Rcpp::wrap(__result);
END_RCPP
}
// frange
NumericVector frange(const NumericVector& x, const bool finite = true);
RcppExport SEXP bigvis_frange(SEXP xSEXP, SEXP finiteSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    NumericVector x = Rcpp::as<NumericVector >(xSEXP);
    bool finite = Rcpp::as<bool >(finiteSEXP);
    NumericVector __result = frange(x, finite);
    return Rcpp::wrap(__result);
END_RCPP
}
// group_fixed
IntegerVector group_fixed(const NumericVector& x, double width, double origin = 0);
RcppExport SEXP bigvis_group_fixed(SEXP xSEXP, SEXP widthSEXP, SEXP originSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    NumericVector x = Rcpp::as<NumericVector >(xSEXP);
    double width = Rcpp::as<double >(widthSEXP);
    double origin = Rcpp::as<double >(originSEXP);
    IntegerVector __result = group_fixed(x, width, origin);
    return Rcpp::wrap(__result);
END_RCPP
}
// group_rect
IntegerVector group_rect(const NumericVector& x, const NumericVector& y, double x_width, double y_width, double x_origin, double y_origin);
RcppExport SEXP bigvis_group_rect(SEXP xSEXP, SEXP ySEXP, SEXP x_widthSEXP, SEXP y_widthSEXP, SEXP x_originSEXP, SEXP y_originSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    NumericVector x = Rcpp::as<NumericVector >(xSEXP);
    NumericVector y = Rcpp::as<NumericVector >(ySEXP);
    double x_width = Rcpp::as<double >(x_widthSEXP);
    double y_width = Rcpp::as<double >(y_widthSEXP);
    double x_origin = Rcpp::as<double >(x_originSEXP);
    double y_origin = Rcpp::as<double >(y_originSEXP);
    IntegerVector __result = group_rect(x, y, x_width, y_width, x_origin, y_origin);
    return Rcpp::wrap(__result);
END_RCPP
}
// group_hex
IntegerVector group_hex(const NumericVector& x, const NumericVector& y, double x_width, double y_width, double x_origin, double y_origin, double x_max);
RcppExport SEXP bigvis_group_hex(SEXP xSEXP, SEXP ySEXP, SEXP x_widthSEXP, SEXP y_widthSEXP, SEXP x_originSEXP, SEXP y_originSEXP, SEXP x_maxSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    NumericVector x = Rcpp::as<NumericVector >(xSEXP);
    NumericVector y = Rcpp::as<NumericVector >(ySEXP);
    double x_width = Rcpp::as<double >(x_widthSEXP);
    double y_width = Rcpp::as<double >(y_widthSEXP);
    double x_origin = Rcpp::as<double >(x_originSEXP);
    double y_origin = Rcpp::as<double >(y_originSEXP);
    double x_max = Rcpp::as<double >(x_maxSEXP);
    IntegerVector __result = group_hex(x, y, x_width, y_width, x_origin, y_origin, x_max);
    return Rcpp::wrap(__result);
END_RCPP
}
// lowerBound
IntegerVector lowerBound(const NumericVector& x, const NumericVector& breaks);
RcppExport SEXP bigvis_lowerBound(SEXP xSEXP, SEXP breaksSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    NumericVector x = Rcpp::as<NumericVector >(xSEXP);
    NumericVector breaks = Rcpp::as<NumericVector >(breaksSEXP);
    IntegerVector __result = lowerBound(x, breaks);
    return Rcpp::wrap(__result);
END_RCPP
}
// smooth_nd_1
NumericVector smooth_nd_1(const NumericMatrix& grid_in, const NumericVector& z_in, const NumericMatrix& grid_out, const int var, const double h);
RcppExport SEXP bigvis_smooth_nd_1(SEXP grid_inSEXP, SEXP z_inSEXP, SEXP grid_outSEXP, SEXP varSEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    NumericMatrix grid_in = Rcpp::as<NumericMatrix >(grid_inSEXP);
    NumericVector z_in = Rcpp::as<NumericVector >(z_inSEXP);
    NumericMatrix grid_out = Rcpp::as<NumericMatrix >(grid_outSEXP);
    int var = Rcpp::as<int >(varSEXP);
    double h = Rcpp::as<double >(hSEXP);
    NumericVector __result = smooth_nd_1(grid_in, z_in, grid_out, var, h);
    return Rcpp::wrap(__result);
END_RCPP
}
// smooth1d
NumericVector smooth1d(const NumericVector& x, const NumericVector& z, const NumericVector& x_out, const double sd, bool standardise = true);
RcppExport SEXP bigvis_smooth1d(SEXP xSEXP, SEXP zSEXP, SEXP x_outSEXP, SEXP sdSEXP, SEXP standardiseSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    NumericVector x = Rcpp::as<NumericVector >(xSEXP);
    NumericVector z = Rcpp::as<NumericVector >(zSEXP);
    NumericVector x_out = Rcpp::as<NumericVector >(x_outSEXP);
    double sd = Rcpp::as<double >(sdSEXP);
    bool standardise = Rcpp::as<bool >(standardiseSEXP);
    NumericVector __result = smooth1d(x, z, x_out, sd, standardise);
    return Rcpp::wrap(__result);
END_RCPP
}
// smooth2d_full
NumericMatrix smooth2d_full(const NumericVector& x, const NumericVector& y, const NumericVector& z, const NumericVector& x_out, const NumericVector& y_out, const double x_sd, const double y_sd, bool standardise = true);
RcppExport SEXP bigvis_smooth2d_full(SEXP xSEXP, SEXP ySEXP, SEXP zSEXP, SEXP x_outSEXP, SEXP y_outSEXP, SEXP x_sdSEXP, SEXP y_sdSEXP, SEXP standardiseSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    NumericVector x = Rcpp::as<NumericVector >(xSEXP);
    NumericVector y = Rcpp::as<NumericVector >(ySEXP);
    NumericVector z = Rcpp::as<NumericVector >(zSEXP);
    NumericVector x_out = Rcpp::as<NumericVector >(x_outSEXP);
    NumericVector y_out = Rcpp::as<NumericVector >(y_outSEXP);
    double x_sd = Rcpp::as<double >(x_sdSEXP);
    double y_sd = Rcpp::as<double >(y_sdSEXP);
    bool standardise = Rcpp::as<bool >(standardiseSEXP);
    NumericMatrix __result = smooth2d_full(x, y, z, x_out, y_out, x_sd, y_sd, standardise);
    return Rcpp::wrap(__result);
END_RCPP
}
// smooth2d2
NumericMatrix smooth2d2(const NumericVector& x, const NumericVector& y, const NumericVector& z, const NumericVector& x_out, const NumericVector& y_out, const double x_sd, const double y_sd, bool standardise = true);
RcppExport SEXP bigvis_smooth2d2(SEXP xSEXP, SEXP ySEXP, SEXP zSEXP, SEXP x_outSEXP, SEXP y_outSEXP, SEXP x_sdSEXP, SEXP y_sdSEXP, SEXP standardiseSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    NumericVector x = Rcpp::as<NumericVector >(xSEXP);
    NumericVector y = Rcpp::as<NumericVector >(ySEXP);
    NumericVector z = Rcpp::as<NumericVector >(zSEXP);
    NumericVector x_out = Rcpp::as<NumericVector >(x_outSEXP);
    NumericVector y_out = Rcpp::as<NumericVector >(y_outSEXP);
    double x_sd = Rcpp::as<double >(x_sdSEXP);
    double y_sd = Rcpp::as<double >(y_sdSEXP);
    bool standardise = Rcpp::as<bool >(standardiseSEXP);
    NumericMatrix __result = smooth2d2(x, y, z, x_out, y_out, x_sd, y_sd, standardise);
    return Rcpp::wrap(__result);
END_RCPP
}
// smooth2d3
NumericMatrix smooth2d3(const NumericVector& x, const NumericVector& y, const NumericVector& z, const double x_width, const double x_origin, const double y_width, const double y_origin, const double x_sd, const double y_sd, bool standardise = true);
RcppExport SEXP bigvis_smooth2d3(SEXP xSEXP, SEXP ySEXP, SEXP zSEXP, SEXP x_widthSEXP, SEXP x_originSEXP, SEXP y_widthSEXP, SEXP y_originSEXP, SEXP x_sdSEXP, SEXP y_sdSEXP, SEXP standardiseSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    NumericVector x = Rcpp::as<NumericVector >(xSEXP);
    NumericVector y = Rcpp::as<NumericVector >(ySEXP);
    NumericVector z = Rcpp::as<NumericVector >(zSEXP);
    double x_width = Rcpp::as<double >(x_widthSEXP);
    double x_origin = Rcpp::as<double >(x_originSEXP);
    double y_width = Rcpp::as<double >(y_widthSEXP);
    double y_origin = Rcpp::as<double >(y_originSEXP);
    double x_sd = Rcpp::as<double >(x_sdSEXP);
    double y_sd = Rcpp::as<double >(y_sdSEXP);
    bool standardise = Rcpp::as<bool >(standardiseSEXP);
    NumericMatrix __result = smooth2d3(x, y, z, x_width, x_origin, y_width, y_origin, x_sd, y_sd, standardise);
    return Rcpp::wrap(__result);
END_RCPP
}
// bisquare
double bisquare(double u, double b);
RcppExport SEXP bigvis_bisquare(SEXP uSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    double u = Rcpp::as<double >(uSEXP);
    double b = Rcpp::as<double >(bSEXP);
    double __result = bisquare(u, b);
    return Rcpp::wrap(__result);
END_RCPP
}
// regress
NumericVector regress(const std::vector<double>& x, const std::vector<double>& y, const std::vector<double>& w);
RcppExport SEXP bigvis_regress(SEXP xSEXP, SEXP ySEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    std::vector<double> x = Rcpp::as<std::vector<double> >(xSEXP);
    std::vector<double> y = Rcpp::as<std::vector<double> >(ySEXP);
    std::vector<double> w = Rcpp::as<std::vector<double> >(wSEXP);
    NumericVector __result = regress(x, y, w);
    return Rcpp::wrap(__result);
END_RCPP
}
// median
double median(const std::vector<double>& x_);
RcppExport SEXP bigvis_median(SEXP x_SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    std::vector<double> x_ = Rcpp::as<std::vector<double> >(x_SEXP);
    double __result = median(x_);
    return Rcpp::wrap(__result);
END_RCPP
}
// simple_loess
NumericVector simple_loess(const std::vector<double>& x, const std::vector<double>& y, const std::vector<double>& w, int iterations = 3);
RcppExport SEXP bigvis_simple_loess(SEXP xSEXP, SEXP ySEXP, SEXP wSEXP, SEXP iterationsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    std::vector<double> x = Rcpp::as<std::vector<double> >(xSEXP);
    std::vector<double> y = Rcpp::as<std::vector<double> >(ySEXP);
    std::vector<double> w = Rcpp::as<std::vector<double> >(wSEXP);
    int iterations = Rcpp::as<int >(iterationsSEXP);
    NumericVector __result = simple_loess(x, y, w, iterations);
    return Rcpp::wrap(__result);
END_RCPP
}
// compute_moments
NumericVector compute_moments(const NumericVector& x);
RcppExport SEXP bigvis_compute_moments(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    NumericVector x = Rcpp::as<NumericVector >(xSEXP);
    NumericVector __result = compute_moments(x);
    return Rcpp::wrap(__result);
END_RCPP
}
// compute_sum
NumericVector compute_sum(const NumericVector& x);
RcppExport SEXP bigvis_compute_sum(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    NumericVector x = Rcpp::as<NumericVector >(xSEXP);
    NumericVector __result = compute_sum(x);
    return Rcpp::wrap(__result);
END_RCPP
}
// compute_median
NumericVector compute_median(const NumericVector& x);
RcppExport SEXP bigvis_compute_median(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    NumericVector x = Rcpp::as<NumericVector >(xSEXP);
    NumericVector __result = compute_median(x);
    return Rcpp::wrap(__result);
END_RCPP
}
