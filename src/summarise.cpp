#include <Rcpp.h>
#include "group.hpp"
#include <bigvis.h>
#include "summary.hpp"
using namespace Rcpp;

template<typename Stat>
NumericVector summarise(const BinnedVectorReference& group, const NumericVector& z, 
                        const NumericVector& weight, const Stat& stat) {
  int n_obs = group.size();
  int n_bins = group.nbins();

  const NumericVector& weight_ = (weight.size() > 0) ? weight : 
    rep(NumericVector::create(1), n_obs);
  const NumericVector& z_ = (z.size() > 0) ? z : 
    rep(NumericVector::create(1), n_obs);

  std::vector<Stat> stats(n_bins + 1, stat);
  for(int i = 0; i < n_obs; ++i) {
    int bin = group.bin_i(i);
    stats.at(bin).push(z_[i], weight_[i]);      
  }

  int m = stats[0].size();
  NumericMatrix res(n_bins, m);
  for (int i = 0; i < n_bins; ++i) {
    for (int j = 0; j < m; ++j) {
      res(i, j) = stats[i].compute(j);
    }
  }

  CharacterVector colnames(m);
  for (int j = 0; j < m; ++j) {
    colnames[j] = stats[0].name(j);
  }
  res.attr("dimnames") = List::create(CharacterVector::create(), colnames);

  return res;
}

// -----------------------------------------------------------------------------
// Autogenerated by summarise-gen.r
// [[Rcpp::export]]
NumericVector summarise_count(const BinnedVectorReference& x, const NumericVector& z, const NumericVector& weight) {
  return summarise(x, z, weight, SummarySum(0));
}

// [[Rcpp::export]]
NumericVector summarise_sum(const BinnedVectorReference& x, const NumericVector& z, const NumericVector& weight) {
  return summarise(x, z, weight, SummarySum(1));
}

// [[Rcpp::export]]
NumericVector summarise_mean(const BinnedVectorReference& x, const NumericVector& z, const NumericVector& weight) {
  return summarise(x, z, weight, SummaryMoments(1));
}

// [[Rcpp::export]]
NumericVector summarise_sd(const BinnedVectorReference& x, const NumericVector& z, const NumericVector& weight) {
  return summarise(x, z, weight, SummaryMoments(2));
}

// [[Rcpp::export]]
NumericVector summarise_median(const BinnedVectorReference& x, const NumericVector& z, const NumericVector& weight) {
  return summarise(x, z, weight, SummaryMedian());
}

