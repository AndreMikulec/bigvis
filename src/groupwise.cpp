#include <Rcpp.h>
#include "group.hpp"
#include "stat.hpp"
using namespace Rcpp;

template<typename Group, typename Stat>
NumericVector groupwise(const NumericVector& y, const NumericVector& weight, 
                        const Group& grouper) {
  std::vector<Stat> stat;

  int n = grouper.size();
  for(int i = 0; i < n; ++i) {
    int bin = grouper.bin(i);
    if (bin < 0) continue;

    if (bin >= stat.size()) {
      stat.resize(bin + 1);
    }

    stat[bin].push(y[i], weight[i]);
  }

  int m = stat.size();
  NumericVector res(m);
  for (int i = 0; i < m; ++i) {
    res[i] = stat[i].compute();
  }
  return res;
}

// -----------------------------------------------------------------------------
// Autogenerated by groupwise-gen.r
// [[Rcpp::export]]
NumericVector compute_count_breaks(const NumericVector& x, const NumericVector& y, const NumericVector& weight, NumericVector& breaks) {
  return groupwise<GroupBreaks, StatCount>(y, weight, GroupBreaks(x, breaks));
}

// [[Rcpp::export]]
NumericVector compute_count_fixed(const NumericVector& x, const NumericVector& y, const NumericVector& weight, double width, double origin) {
  return groupwise<GroupFixed, StatCount>(y, weight, GroupFixed(x, width, origin));
}

// [[Rcpp::export]]
NumericVector compute_sum_breaks(const NumericVector& x, const NumericVector& y, const NumericVector& weight, NumericVector& breaks) {
  return groupwise<GroupBreaks, StatSum>(y, weight, GroupBreaks(x, breaks));
}

// [[Rcpp::export]]
NumericVector compute_sum_fixed(const NumericVector& x, const NumericVector& y, const NumericVector& weight, double width, double origin) {
  return groupwise<GroupFixed, StatSum>(y, weight, GroupFixed(x, width, origin));
}

// [[Rcpp::export]]
NumericVector compute_mean_breaks(const NumericVector& x, const NumericVector& y, const NumericVector& weight, NumericVector& breaks) {
  return groupwise<GroupBreaks, StatMean>(y, weight, GroupBreaks(x, breaks));
}

// [[Rcpp::export]]
NumericVector compute_mean_fixed(const NumericVector& x, const NumericVector& y, const NumericVector& weight, double width, double origin) {
  return groupwise<GroupFixed, StatMean>(y, weight, GroupFixed(x, width, origin));
}

// [[Rcpp::export]]
NumericVector compute_median_breaks(const NumericVector& x, const NumericVector& y, const NumericVector& weight, NumericVector& breaks) {
  return groupwise<GroupBreaks, StatMedian>(y, weight, GroupBreaks(x, breaks));
}

// [[Rcpp::export]]
NumericVector compute_median_fixed(const NumericVector& x, const NumericVector& y, const NumericVector& weight, double width, double origin) {
  return groupwise<GroupFixed, StatMedian>(y, weight, GroupFixed(x, width, origin));
}

// [[Rcpp::export]]
NumericVector compute_sd_breaks(const NumericVector& x, const NumericVector& y, const NumericVector& weight, NumericVector& breaks) {
  return groupwise<GroupBreaks, StatSd>(y, weight, GroupBreaks(x, breaks));
}

// [[Rcpp::export]]
NumericVector compute_sd_fixed(const NumericVector& x, const NumericVector& y, const NumericVector& weight, double width, double origin) {
  return groupwise<GroupFixed, StatSd>(y, weight, GroupFixed(x, width, origin));
}

